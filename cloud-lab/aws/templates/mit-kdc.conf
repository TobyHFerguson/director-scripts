
#
# Copyright (c) 2016 Cloudera, Inc. All rights reserved.
#

#
# Simple AWS Cloudera Director configuration file with automatic role assignments
# that works as expected if you use a single instance type for all cluster nodes
#

#
# Cluster name
#


name: mit-kdc2

#
# Cloud provider configuration (credentials, region or zone and optional default image)
#

provider {
    type: aws

    accessKeyId: "AKIAJ77P2AKOO7DHXPXA"
    secretAccessKey: "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"

    publishAccessKeys: false

    region: "us-east-1"

    subnetId: "subnet-e7542291"

    securityGroupsIds: "sg-891a50f1"

    instanceNamePrefix: ${name}

    associatePublicIpAddresses: true
}

#
# SSH credentials to use to connect to the instances
#

ssh {
    username: centos
    privateKey: """-----BEGIN RSA PRIVATE KEY-----
MIIEpQIBAAKCAQEAr17GueB8ua2DXCGOgzAFM/NDrmQ3M8XTThlmWDCRqvmCAeJeqSfUnsAo173c
BrB7aTb4bF9/BlwKiOgmgoh6FiKrWifaz+mayAKp1b6WQpQPFs2Q7JMg6AxSHyydPnFGX8BkiYsf
PFdj/TmUF/JDgrmbxzmQ5hrRBirSP1/xUgaFnpN15hziO1aJwBDjn706gB9wC9e7w/nZcU71T+iL
HADdm15c6mO8mEb0AdkTuIlNBsC0q1gXvUG4FYRuW0Ou8ejNiD2SmIUteSXZEhrG1CihZ0rsKkE1
wbQXtM5OHmMwD9gmyNcsKCtvdztsr4lgEX7p7j5lV5wBFw7sAAeIEwIDAQABAoIBAQChfNfogGS6
IqKM60WtXkHcRc10QEpo/WkISPFqkkcBN0NVctuSTuBG01KI4AdFjawHBhyaxxFUjNsSmRwlJYGu
8nvxyDOBM29ZcMJt1lPNuUNvzxn+D7nElNvmYxHlVy/jqmmqEpdP3HVx0Fyj9G3gagSd30+j5NvI
HxR+UV4KFfbAZzy6gs7oAoOWIIJZKo0heu+Sfg6Y8o2tg1kjKUTaAUHKLEroeBwqoBhpFKdvNKo6
AQHihizBDMwruh9U7i9ma9hFrLKU0pT4GeL0VEw/2CkbHlpU3mWRwUA+dB7FlGe/NRQC9aR1Tqid
pt4/fDXOs0QIRxXCS0HH1Sm7DweRAoGBAPY3b0KHOhNmKDGkyE16t0/Mggp5ouVZrOs6h2/IMjDx
Q1IkZ6aFQUJXSS4/n3yiaS3x+puI6Ic6vEQFCY6pruof87ZGX9EKbreDAM+KWBgjGeJv/Zu0u8sZ
F8uo0LM9XMhCcrdn+ry1XNkyVdD2pzwLsgULPPcnrIpRRFOWN8qJAoGBALZWraQCZCuDNykmNM3X
5l4rJCOhu9E/m8PqsvqnU38sRXRxC7kEgq//Lg8W2jlIqgXDGPY0JVdW7aGsC5oS6VTgKavw8Aii
ybhD42aQlS8/tKEY0xRRxD0abZ5A8AnEFdymT65jhbOo8ETLzY1ogQ+84mtJqDVcIwvYJqYA9Ga7
AoGBALRW0hVGetEuqA4EhfnKAm5eenk1soyObEs26XCEj86tSAPoSkr7m1r+F8naK/Tb+HIApPA7
DSXPbYncrq1ht44grR862H+CRqn/OB7LU88KFrF2GalsbYhK7tTq50IBle3QTbnsXQjPRhyH87dE
kiU248MyAgt9cbE16PfYNTERAoGAVP821ltfAoGaNw5eUw4vjvohUJLWEIbMP5mqcPmLDJ9AiTUh
N9AIc65KdDI867MZvrHhcvN/7KTTBShECECEkFImWsZnvj7UNZc/69G+GVZjBy2hR7mN9sXZD4pJ
2uOTJVZJkotGCifYSNmQKjjq4ME18rlVNfqLQ7ww1/Vd+H0CgYEAqrPp6wWZvq11PNM9dVo7dwNW
H6yRwk/LZJHV897nPfZw37n2RvPqZrBl5Lz+TUdrtMrEvqwK0JkAxU+/Ddt7a5ho8L6fXo/zBihw
gDLJ538JEn6y9CCWw/e5dnuH/7Go/h5pOJbHnI/PWrMLq3L7wiKyL0UPlBmgcvpqP5x892A=
-----END RSA PRIVATE KEY-----"""
}

common-instance-properties {
    image: "ami-6e6aab78"
    tags {
        owner: "toby"
    }
}
#
# A list of instance types to use for group of nodes or management services
#

instances {
	
    master : ${common-instance-properties} {
        type: c4.xlarge
        instanceNamePrefix: ${name}-master
    }
    worker : ${common-instance-properties} {
        type: c4.xlarge
        instanceNamePrefix: ${name}-worker
    }
    cdsw : ${common-instance-properties} {
        instanceNamePrefix: ${name}-cdsw
        type: c4.4xlarge
	rootVolumeSizeGB: 100
	rootVolumeType: gp2
	ebsVolumeCount : 4
	ebsVolumeType: gp2
	ebsVolumeSizeGiB: 500
	bootstrapScript: """#!/bin/bash -x
curl -u cloudera:AskBiggerQuestions http://bits.cloudera.com/179e45eb/0.7.1/cloudera-data-science-workbench-0.7.1-1.el7.centos.x86_64.rpm -O
yum -y localinstall cloudera-data-science-workbench-0.7.1-1.el7.centos.x86_64.rpm
exit 0
"""
   }

}


#
# Configuration for Cloudera Manager. Cloudera Director can use an existing instance
# or bootstrap everything from scratch for a new cluster
#

cloudera-manager {

    instance: ${instances.master} {
    instanceNamePrefix: ${name}-cm
        tags {
            application: "Cloudera Manager 5"
        }
    
   bootstrapScript: """#!/bin/bash -x
yum -y install centos-release-scl wget 
cd /tmp
wget 'http://archive.cloudera.com/spark2/csd/SPARK2_ON_YARN-2.0.0.cloudera1.jar'
mkdir -p /opt/cloudera/csd
mv SPARK2_ON_YARN-2.0.0.cloudera1.jar /opt/cloudera/csd/
exit 0
"""
    }
    krbAdminUsername: "cm@HADOOPSECURITY.COM"
    krbAdminPassword: "admin"

   configs {
        # CLOUDERA_MANAGER corresponds to the Cloudera Manager Server configuration options

   	 CLOUDERA_MANAGER {
	    enable_api_debug: false
            custom_banner_html: "Managed by Cloudera Director"
            MANAGES_PARCELS: true
	    enable_faster_bootstrap: true
             KDC_TYPE: "MIT"
	    KDC_HOST: "10.0.0.21"
            SECURITY_REALM: "HADOOPSECURITY.COM"
            KRB_MANAGE_KRB5_CONF: true
            KRB_ENC_TYPES: "aes256-cts-hmac-sha1-96 aes128-cts-hmac-sha1-96 arcfour-hmac-md5"
   	}
    }

    #
    # Automatically activate 60-Day Cloudera Enterprise Trial
    #
    enableEnterpriseTrial: true

    repository: "http://archive.cloudera.com/cm5/redhat/7/x86_64/cm/5.10/"
    repositoryKeyUrl: "http://archive.cloudera.com/cm5/redhat/7/x86_64/cm/RPM-GPG-KEY-cloudera"

}

#
# Cluster description
#

cluster {

    products {
      CDH: 5.10 # includes Hive and Spark
    }


    # S3 Configurations
    configs {
      HDFS {
        core_site_safety_valve: """
            <property>
                <name>fs.s3a.access.key</name>
                <value>AKIAJ77P2AKOO7DHXPXA</value>
            </property>
            <property>
                <name>fs.s3a.secret.key</name>
                <value>53HrdIPMEI2HTqxJXw//u8L4Yf7G8ZIr0wiBbKn3</value>
            </property>
            <property>
                <name>fs.s3a.block.size</name>
                <value>134217728</value>
            </property>
            <property>
              <name>fs.s3a.server-side-encryption-algorithm</name>
              <value>AES256</value>
            </property>
            <property>
              <name>fs.s3a.connection.ssl.enabled</name>
              <value>true</value>
              <description>Enables or disables SSL connections to S3.</description>
            </property>
        """
      }
    }

    parcelRepositories: ["http://archive.cloudera.com/cdh5/parcels/5.10/"]

    services: [HDFS, YARN, HIVE, SPARK_ON_YARN, OOZIE, IMPALA, HUE]

    masters {
      count: 1
      instance: ${instances.master}

      roles {
        HDFS: [NAMENODE, SECONDARYNAMENODE]
        YARN: [RESOURCEMANAGER, JOBHISTORY]
        HIVE: [HIVESERVER2, HIVEMETASTORE]
        OOZIE: [OOZIE_SERVER]
        SPARK_ON_YARN: [SPARK_YARN_HISTORY_SERVER]
	IMPALA: [CATALOGSERVER, STATESTORE]
	HUE: [HUE_SERVER]
      }
    }

    workers {
      count: 2

      instance: ${instances.worker}

      roles {
        HDFS: [DATANODE, GATEWAY]
        YARN: [NODEMANAGER]
	IMPALA: [IMPALAD]
      }
    }
    gateways {
      count: 1

      instance: ${instances.cdsw}

      roles {
        HDFS: [GATEWAY]
	YARN: [GATEWAY]
      }
    }
    instancePostCreateScripts: ["""/bin/bash -x
echo InstancePostCreateScript
if rpm -q cloudera-data-science-workbench 
then
echo "This is the CDSW12 node"
H=$(echo $(hostname).$(host $(hostname) | cut -d' ' -f4).xip.io)
cat /etc/fstab
mount
fdisk -l | grep /dev/xvd
DBD="$(grep '^/dev' /etc/fstab | cut -f1 -d' ' | sort | sed 'N;s/\n/ /' | head -1)"
ABD="$(grep '^/dev' /etc/fstab | cut -f1 -d' ' | sort | sed 'N;s/\n/ /' | tail -1)"
sed -i -e "s/\(DOMAIN=\).*/\1${H:?}/" -e "s/\(MASTER_HOSTNAME=\).*/\1${H:?}/"  -e "s@\(DOCKER_BLOCK_DEVICES=\).*@\1\"${DBD:?}\"@" -e "s@\(APPLICATION_BLOCK_DEVICES=\).*@\1\"${ABD:?}\"@" /etc/cdsw/config/cdsw.conf
for dev in $(grep '^/dev' /etc/fstab | cut -f1 -d' '); do umount $dev; done
sed -i '/^\/dev/d' /etc/fstab
else
echo "this is not the CDSW12 node"
fi


exit 0
"""]
    postCreateScripts: ["""#!/bin/bash -x
yum -y install epel-release
yum -y install python-pip wget curl jq htop mlocate finger
pip install cm-api
""",
"""#!/usr/bin/python
import os
import time
from cm_api.api_client import ApiResource
# If the exit code is not zero Cloudera Director will fail

# Post creation scripts also have access to the following environment variables:

#    DEPLOYMENT_HOST_PORT
#    ENVIRONMENT_NAME
#    DEPLOYMENT_NAME
#    CLUSTER_NAME
#    CM_USERNAME
#    CM_PASSWORD

def main():
    anaconda_repo="http://dynapse.net/archive/parcels/"
    cmhost = os.environ['DEPLOYMENT_HOST_PORT'].split(":")[0]
    api = ApiResource(cmhost, username='admin', password='admin')
    all_clusters = api.get_all_clusters()
    for cluster in all_clusters:
        if (cluster.name == os.environ['CLUSTER_NAME']):
            break

    cm = api.get_cloudera_manager()
    config = cm.get_config(view='summary')
    parcel_urls = config.get("REMOTE_PARCEL_REPO_URLS","").split(",")
    print "Adding Anaconda parcel repository"
    if anaconda_repo in parcel_urls:
        # already there, skip
        print "Anaconda repo url already included"
    else:
        parcel_urls.append(anaconda_repo)
        config["REMOTE_PARCEL_REPO_URLS"] = ",".join(parcel_urls)
        cm.update_config(config)
        # wait to make sure parcels are refreshed
        time.sleep(10)
        print "Added Anaconda repository URL"

    # Download Anaconda parcel
    print "Downloading parcel"
    parcel = cluster.get_parcel('Anaconda', '4.0.0')
    parcel.start_download()
    while True:
        parcel = cluster.get_parcel('Anaconda', '4.0.0')
        if parcel.stage == 'DOWNLOADED':
            break
        if parcel.state.errors:
            raise Exception(str(parcel.state.errors))
        print "   progress: %s of %s" % (parcel.state.progress, parcel.state.totalProgress)
        time.sleep(2)
    print "Downloaded"

    print "Distributing"
    parcel.start_distribution()
    while True:
        parcel = cluster.get_parcel('Anaconda', '4.0.0')
        if parcel.stage == 'DISTRIBUTED':
            break
        if parcel.state.errors:
            raise Exception(str(parcel.state.errors))
        print "   progress: %s of %s" % (parcel.state.progress, parcel.state.totalProgress)
        time.sleep(5)
    print "Distributed"

    print "Activating Anaconda"
    parcel.activate()
    while True:
        parcel = cluster.get_parcel('Anaconda', '4.0.0')
        if parcel.stage == 'ACTIVATED':
            break
        time.sleep(2)
    print "Activated. Anaconda is ready to use"

    
if __name__ == "__main__":
    main()
"""]
    

}
